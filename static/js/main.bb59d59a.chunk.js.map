{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCityChange","e","cityName","target","value","setState","inputCity","handleZipChange","zipName","inputZip","getWeather","city","state","zip","click","error","isLoaded","itemsWeather","Weather","APIKEY","prevState","_this2","fetch","then","res","json","result","message","items","react_default","a","createElement","id","className","type","placeholder","onChange","onClick","x","main","undefined","console","log","obj","keys","map","weather","description","getWeatherValue","y","getPicture","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb59d59a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      itemsWeather: [],\n      Weather:[],\n      inputCity: '',\n      inputZip: '',\n      city:'',\n      zip:'',\n      click: false,\n      APIKEY: 'f1967d9024d5e980cd6fa6d702e815f8'\n    }\n  }\n\n\n\n  handleCityChange = (e) => {\n    var cityName = e.target.value;\n    this.setState({inputCity:cityName})\n  }\n\n\n  handleZipChange = (e) => {\n    var zipName = e.target.value;\n    this.setState({inputZip:zipName})\n  }\n\n  getWeather = (e) => {\n    this.setState({\n      city:this.state.inputCity,\n      zip:this.state.inputZip,\n      click:true\n    })\n  }\n\n\n\n\n  componentDidUpdate(prevState) {\n    if(this.state.click && (this.state.city !== '' || this.state.zip !== '' ) ){\n    fetch(\"https://api.openweathermap.org/data/2.5/weather?zip=\"+this.state.zip+\"&q=\"+this.state.city+\"&units=imperial&APPID=\"+this.state.APIKEY+\"\").then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            itemsWeather: result,\n            click:false,\n            city:'',\n            error:result.message,\n            zip:'',\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: false,\n            error,\n            items:'',\n            click:false\n          });\n        }\n      )\n  }\n    }\n\n  render() {\n    function getPicture(y){\n      if(y.weather !== undefined){\n      console.log(y.weather[0].main)\n      if(y.weather[0].main === 'Rain'){\n       return <div className='weather-rain-picture'></div>\n      }else if(y.weather[0].main === 'fog'){\n        return <div className='weather-fog-picture'></div>\n      }else if(y.weather[0].main === 'Clear'){\n        return <div className='weather-partlySunny-picture'></div>\n      }else if(y.weather[0].main === 'Clouds'){\n       return <div className='weather-cloudy-picture'></div>\n      }\n    }\n    }\n\n function getWeatherValue(x){\n    if(x.isLoaded && (x.itemsWeather.main !== null && x.itemsWeather.main!== undefined)){\n        console.log(x.itemsWeather.main)\n      var descrArr = Object.keys(x.itemsWeather.main);\n      var obj = descrArr.map(function(value){\n        return [x.itemsWeather.main[value],[value]]\n      })\n      console.log(x)\n        return( \n          <div>\n            <div className='response'>            \n              <h1>Description</h1>\n              <p className='text-desc'>{x.itemsWeather.weather[0].description}</p>\n            </div>\n            <div className='response'>            \n              <h1>Temperature:</h1>\n              <p className='text-desc'>{obj[0][0]}</p>\n            </div>\n            <div className='response'>            \n              <h1>Pressure</h1>\n              <p className='text-desc'>{obj[1][0]}</p>\n            </div>\n            <div className='response'>            \n              <h1>Humdity:</h1>\n              <p className='text-desc'>{obj[2][0]}</p>\n            </div>\n            <div className='response'>            \n              <h1>Temperature Max:</h1>\n              <p>{obj[3][0]}:</p>\n            </div>\n          </div>\n          )\n    }else{\n      return(\n          <div className='response'>            \n            <h1>{x.error}</h1>\n          </div>\n          )\n  }\n }\n    return (\n      <div id='background' className=\"background-container\">\n        <div className='weather-app-container'>\n          <div className=\"weather-app\">\n            <div className='insertInfo'>\n              <input type='text' placeholder='City' onChange={this.handleCityChange} className='left'/>\n              <input type='text' placeholder='Zip' onChange={this.handleZipChange} className='right'/>\n              <button id='getWeatherButton' onClick={this.getWeather} className='weather-button'>Get Weather</button> \n            </div>\n            <div id=\"result\" className='results'>\n            {getWeatherValue(this.state)}\n              \n            </div>\n          </div>\n          {getPicture(this.state.itemsWeather)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}